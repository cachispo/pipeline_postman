{
	"info": {
		"_postman_id": "bd334428-167d-46ce-a8f2-90091741da2e",
		"name": "Ejemplo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44305711",
		"_collection_link": "https://planetary-resonance-133524.postman.co/workspace/Jos%C3%A9-Rodr%C3%ADguez's-Workspace~0ddbfe23-f52b-4ed5-80fc-e40ccd23acb2/collection/44305711-bd334428-167d-46ce-a8f2-90091741da2e?action=share&source=collection_link&creator=44305711"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - userId, id, title, and body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post).to.have.property('userId');\r",
							"        pm.expect(post).to.have.property('id');\r",
							"        pm.expect(post).to.have.property('title');\r",
							"        pm.expect(post).to.have.property('body');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"UserId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post.userId).to.be.a('number');\r",
							"        pm.expect(post.userId).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(post) {\r",
							"        pm.expect(post.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	]
}